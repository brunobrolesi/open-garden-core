// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks_usecase

import (
	context "context"

	model "github.com/brunobrolesi/open-garden-core/internal/user/business/model"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/brunobrolesi/open-garden-core/internal/user/business/usecase"
)

// CreateUserUseCase is an autogenerated mock type for the CreateUserUseCase type
type CreateUserUseCase struct {
	mock.Mock
}

// Exec provides a mock function with given fields: ctx, user
func (_m *CreateUserUseCase) Exec(ctx context.Context, user usecase.CreateUserInputDto) (model.Token, error) {
	ret := _m.Called(ctx, user)

	var r0 model.Token
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreateUserInputDto) model.Token); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(model.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, usecase.CreateUserInputDto) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCreateUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCreateUserUseCase creates a new instance of CreateUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCreateUserUseCase(t mockConstructorTestingTNewCreateUserUseCase) *CreateUserUseCase {
	mock := &CreateUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
