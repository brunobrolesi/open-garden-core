// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks_gateway

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/brunobrolesi/open-garden-core/internal/sensor/business/model"
)

// FarmSensorRepository is an autogenerated mock type for the FarmSensorRepository type
type FarmSensorRepository struct {
	mock.Mock
}

// CreateFarmSensor provides a mock function with given fields: _a0, _a1
func (_m *FarmSensorRepository) CreateFarmSensor(_a0 context.Context, _a1 model.FarmSensor) (model.FarmSensor, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.FarmSensor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.FarmSensor) (model.FarmSensor, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.FarmSensor) model.FarmSensor); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.FarmSensor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.FarmSensor) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFarmSensorById provides a mock function with given fields: _a0, _a1
func (_m *FarmSensorRepository) GetFarmSensorById(_a0 context.Context, _a1 int) (model.FarmSensor, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.FarmSensor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.FarmSensor, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.FarmSensor); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.FarmSensor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFarmSensorsByFarmId provides a mock function with given fields: _a0, _a1
func (_m *FarmSensorRepository) GetFarmSensorsByFarmId(_a0 context.Context, _a1 int) (model.FarmSensors, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.FarmSensors
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.FarmSensors, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.FarmSensors); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FarmSensors)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFarmSensorRepository creates a new instance of FarmSensorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFarmSensorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FarmSensorRepository {
	mock := &FarmSensorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
