// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks_usecase

import (
	context "context"

	model "github.com/brunobrolesi/open-garden-core/internal/farm/business/model"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/brunobrolesi/open-garden-core/internal/farm/business/usecase"
)

// GetUserFarmUseCase is an autogenerated mock type for the GetUserFarmUseCase type
type GetUserFarmUseCase struct {
	mock.Mock
}

// Exec provides a mock function with given fields: input, ctx
func (_m *GetUserFarmUseCase) Exec(input usecase.GetUserFarmInputDto, ctx context.Context) (model.Farm, error) {
	ret := _m.Called(input, ctx)

	var r0 model.Farm
	if rf, ok := ret.Get(0).(func(usecase.GetUserFarmInputDto, context.Context) model.Farm); ok {
		r0 = rf(input, ctx)
	} else {
		r0 = ret.Get(0).(model.Farm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(usecase.GetUserFarmInputDto, context.Context) error); ok {
		r1 = rf(input, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetUserFarmUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetUserFarmUseCase creates a new instance of GetUserFarmUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetUserFarmUseCase(t mockConstructorTestingTNewGetUserFarmUseCase) *GetUserFarmUseCase {
	mock := &GetUserFarmUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
