// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks_gateway

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/brunobrolesi/open-garden-core/internal/measurements/business/model"

	time "time"
)

// SensorMeasurementRepository is an autogenerated mock type for the SensorMeasurementRepository type
type SensorMeasurementRepository struct {
	mock.Mock
}

// AddSensorMeasurement provides a mock function with given fields: ctx, sensorID, value
func (_m *SensorMeasurementRepository) AddSensorMeasurement(ctx context.Context, sensorID int, value float64) error {
	ret := _m.Called(ctx, sensorID, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64) error); ok {
		r0 = rf(ctx, sensorID, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSensorPeriodMeasurements provides a mock function with given fields: ctx, sensorID, userID, from, to
func (_m *SensorMeasurementRepository) GetSensorPeriodMeasurements(ctx context.Context, sensorID int, userID int, from time.Time, to time.Time) (model.SensorMeasurements, error) {
	ret := _m.Called(ctx, sensorID, userID, from, to)

	var r0 model.SensorMeasurements
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, time.Time, time.Time) (model.SensorMeasurements, error)); ok {
		return rf(ctx, sensorID, userID, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, time.Time, time.Time) model.SensorMeasurements); ok {
		r0 = rf(ctx, sensorID, userID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.SensorMeasurements)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, time.Time, time.Time) error); ok {
		r1 = rf(ctx, sensorID, userID, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSensorMeasurementRepository creates a new instance of SensorMeasurementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSensorMeasurementRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SensorMeasurementRepository {
	mock := &SensorMeasurementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
