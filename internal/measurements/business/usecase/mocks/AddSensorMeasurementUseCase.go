// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks_usecase

import (
	context "context"

	usecase "github.com/brunobrolesi/open-garden-core/internal/measurements/business/usecase"
	mock "github.com/stretchr/testify/mock"
)

// AddSensorMeasurementUseCase is an autogenerated mock type for the AddSensorMeasurementUseCase type
type AddSensorMeasurementUseCase struct {
	mock.Mock
}

// Exec provides a mock function with given fields: ctx, input
func (_m *AddSensorMeasurementUseCase) Exec(ctx context.Context, input usecase.AddSensorMeasurementInputDto) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.AddSensorMeasurementInputDto) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAddSensorMeasurementUseCase creates a new instance of AddSensorMeasurementUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddSensorMeasurementUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddSensorMeasurementUseCase {
	mock := &AddSensorMeasurementUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
